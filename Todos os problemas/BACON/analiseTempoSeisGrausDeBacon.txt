n = número de filmes no dataset credits
m = número médio de atores por filme
v = número total de atores no grafo
e = número total de conexões entre atores no grafo

  def carregar_datasets(movies_path, credits_path):		    		custo		vezes		total
03.    movies = pd.read_csv(movies_path)			            	1		    1		    1
04.    credits = pd.read_csv(credits_path)		            		1		    1		    1
05.    Retornar movies, credits				                	0		    1		    0

T(n) = 2 ---> \(O(1)\), já que o carregamento depende de bibliotecas.

---

  def construir_grafo(credits):				                	custo		vezes		total
08.    grafo = defaultdict(list)				             	1		    1		    1
09.    filmes_atores = defaultdict(list)		             		1		    1		    1
10.    Para cada linha em credits:			             		1		    n		    1*n
11.        elenco = json.loads(row['cast'])		         		1		    n		    1*n
12.        filme_id = row['movie_id']			             		1		    n		    1*n
13.        atores = [ator['name'] for ator in elenco]	     			1		    n*m		1*n*m
14.        Registrar atores no mapa filmes_atores		     		1		    n*m		1*n*m
15.        Para cada ator i no elenco:		             			1		    n*m		1*n*m
16.            Para cada ator j após i no elenco:		     		1		    n*m*m	1*n*m*m
17.                Adicionar conexão bidirecional no grafo 1		    	n*m*m		1*n*m*m
18.    Retornar grafo, filmes_atores			             		0		    1		    0

T(n, m) = 2 + n + n*m + 2(n*m^2) ---> O(n * m^2)

---

  def encontrar_caminho(grafo, filmes_atores, ator1, ator2):			custo		vezes		total
22.    Se ator1 ou ator2 não estão no grafo:		            		1		    1		    1
23.        Retornar None					                                0		    1		    0
24.    visitados = set()				                        1		    1		    1
25.    fila = deque([(ator1, [ator1], [])])		            		1		    1		    1
26.    Enquanto fila não está vazia:			                	1		    v + e		v + e
27.        atual, caminho_atores, caminho_filmes = fila.popleft() 		1		v		    v
28.        Se atual for igual a ator2:			                	1		    1		    1
29.            Retornar caminho_atores, caminho_filmes		    		0		    1		    0
30.        Adicionar atual ao conjunto visitados		        	1		    v		    v
31.        Para cada vizinho e filme_id no grafo:		        	1		    e		    e
32.            Se vizinho não está em visitados:		        	1		    e		    e
33.                Adicionar vizinho e caminho atualizado	    		1		    e		    e
34.    Retornar None				                                0		    1		    0

T(v, e) = v + e + e + e = 3e + v ---> \(O(v + e)\)

---

  Programa principal:					                        custo		vezes		total
37. Carregar datasets					                        O(1)		1		    O(1)
39. Construir grafo					                        O(n*m^2)	1		    O(n*m^2)
42. Encontrar caminho				                            	O(v + e)	1		    O(v + e)
47. Imprimir resultado				                            	O(len(caminho))	1		O(len(caminho))

T(n, m, v, e) = O(n * m^2) + O(v + e) ---> O(n * m^2)
